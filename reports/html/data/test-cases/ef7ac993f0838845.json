{
  "uid" : "ef7ac993f0838845",
  "name" : "TestAdd.test_004_xiugaiyongyao",
  "fullName" : "test_updateziliao.TestAdd.test_004_xiugaiyongyao",
  "historyId" : "93603a899d481e2a309c142fa2571148",
  "time" : {
    "start" : 1559620629055,
    "stop" : 1559620629099,
    "duration" : 44
  },
  "description" : "",
  "descriptionHtml" : "",
  "status" : "broken",
  "statusMessage" : "WebDriverException: Message: 'chromedriver' executable needs to be in PATH. Please see https://sites.google.com/a/chromium.org/chromedriver/home\n",
  "statusTrace" : "self = <selenium.webdriver.chrome.service.Service object at 0x000001A73EC1D320>\n\n    def start(self):\n        \"\"\"\n            Starts the Service.\n    \n            :Exceptions:\n             - WebDriverException : Raised either when it can't start the service\n               or when it can't connect to the service\n            \"\"\"\n        try:\n            cmd = [self.path]\n            cmd.extend(self.command_line_args())\n            self.process = subprocess.Popen(cmd, env=self.env,\n                                            close_fds=platform.system() != 'Windows',\n                                            stdout=self.log_file,\n                                            stderr=self.log_file,\n>                                           stdin=PIPE)\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\selenium\\webdriver\\common\\service.py:76: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <subprocess.Popen object at 0x000001A73EC1D550>\nargs = ['chromedriver', '--port=52967'], bufsize = -1, executable = None\nstdin = -1, stdout = -3, stderr = -3, preexec_fn = None, close_fds = False\nshell = False, cwd = None\nenv = environ({'ALLUSERSPROFILE': 'C:\\\\ProgramData', 'APPDATA': 'C:\\\\Users\\\\87842\\\\AppData\\\\Roaming', 'CLASSPATH': '.;D:\\\\My...Windows', 'PYTEST_CURRENT_TEST': 'testcase/patient/test_updateziliao.py::TestAdd::()::test_004_xiugaiyongyao (setup)'})\nuniversal_newlines = False, startupinfo = None, creationflags = 0\nrestore_signals = True, start_new_session = False, pass_fds = ()\n\n    def __init__(self, args, bufsize=-1, executable=None,\n                 stdin=None, stdout=None, stderr=None,\n                 preexec_fn=None, close_fds=_PLATFORM_DEFAULT_CLOSE_FDS,\n                 shell=False, cwd=None, env=None, universal_newlines=False,\n                 startupinfo=None, creationflags=0,\n                 restore_signals=True, start_new_session=False,\n                 pass_fds=(), *, encoding=None, errors=None):\n        \"\"\"Create new Popen instance.\"\"\"\n        _cleanup()\n        # Held while anything is calling waitpid before returncode has been\n        # updated to prevent clobbering returncode if wait() or poll() are\n        # called from multiple threads at once.  After acquiring the lock,\n        # code must re-check self.returncode to see if another thread just\n        # finished a waitpid() call.\n        self._waitpid_lock = threading.Lock()\n    \n        self._input = None\n        self._communication_started = False\n        if bufsize is None:\n            bufsize = -1  # Restore default\n        if not isinstance(bufsize, int):\n            raise TypeError(\"bufsize must be an integer\")\n    \n        if _mswindows:\n            if preexec_fn is not None:\n                raise ValueError(\"preexec_fn is not supported on Windows \"\n                                 \"platforms\")\n            any_stdio_set = (stdin is not None or stdout is not None or\n                             stderr is not None)\n            if close_fds is _PLATFORM_DEFAULT_CLOSE_FDS:\n                if any_stdio_set:\n                    close_fds = False\n                else:\n                    close_fds = True\n            elif close_fds and any_stdio_set:\n                raise ValueError(\n                        \"close_fds is not supported on Windows platforms\"\n                        \" if you redirect stdin/stdout/stderr\")\n        else:\n            # POSIX\n            if close_fds is _PLATFORM_DEFAULT_CLOSE_FDS:\n                close_fds = True\n            if pass_fds and not close_fds:\n                warnings.warn(\"pass_fds overriding close_fds.\", RuntimeWarning)\n                close_fds = True\n            if startupinfo is not None:\n                raise ValueError(\"startupinfo is only supported on Windows \"\n                                 \"platforms\")\n            if creationflags != 0:\n                raise ValueError(\"creationflags is only supported on Windows \"\n                                 \"platforms\")\n    \n        self.args = args\n        self.stdin = None\n        self.stdout = None\n        self.stderr = None\n        self.pid = None\n        self.returncode = None\n        self.universal_newlines = universal_newlines\n        self.encoding = encoding\n        self.errors = errors\n    \n        # Input and output objects. The general principle is like\n        # this:\n        #\n        # Parent                   Child\n        # ------                   -----\n        # p2cwrite   ---stdin--->  p2cread\n        # c2pread    <--stdout---  c2pwrite\n        # errread    <--stderr---  errwrite\n        #\n        # On POSIX, the child objects are file descriptors.  On\n        # Windows, these are Windows file handles.  The parent objects\n        # are file descriptors on both platforms.  The parent objects\n        # are -1 when not using PIPEs. The child objects are -1\n        # when not redirecting.\n    \n        (p2cread, p2cwrite,\n         c2pread, c2pwrite,\n         errread, errwrite) = self._get_handles(stdin, stdout, stderr)\n    \n        # We wrap OS handles *before* launching the child, otherwise a\n        # quickly terminating child could make our fds unwrappable\n        # (see #8458).\n    \n        if _mswindows:\n            if p2cwrite != -1:\n                p2cwrite = msvcrt.open_osfhandle(p2cwrite.Detach(), 0)\n            if c2pread != -1:\n                c2pread = msvcrt.open_osfhandle(c2pread.Detach(), 0)\n            if errread != -1:\n                errread = msvcrt.open_osfhandle(errread.Detach(), 0)\n    \n        text_mode = encoding or errors or universal_newlines\n    \n        self._closed_child_pipe_fds = False\n    \n        try:\n            if p2cwrite != -1:\n                self.stdin = io.open(p2cwrite, 'wb', bufsize)\n                if text_mode:\n                    self.stdin = io.TextIOWrapper(self.stdin, write_through=True,\n                            line_buffering=(bufsize == 1),\n                            encoding=encoding, errors=errors)\n            if c2pread != -1:\n                self.stdout = io.open(c2pread, 'rb', bufsize)\n                if text_mode:\n                    self.stdout = io.TextIOWrapper(self.stdout,\n                            encoding=encoding, errors=errors)\n            if errread != -1:\n                self.stderr = io.open(errread, 'rb', bufsize)\n                if text_mode:\n                    self.stderr = io.TextIOWrapper(self.stderr,\n                            encoding=encoding, errors=errors)\n    \n            self._execute_child(args, executable, preexec_fn, close_fds,\n                                pass_fds, cwd, env,\n                                startupinfo, creationflags, shell,\n                                p2cread, p2cwrite,\n                                c2pread, c2pwrite,\n                                errread, errwrite,\n>                               restore_signals, start_new_session)\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python36\\lib\\subprocess.py:707: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <subprocess.Popen object at 0x000001A73EC1D550>\nargs = 'chromedriver --port=52967', executable = None, preexec_fn = None\nclose_fds = False, pass_fds = (), cwd = None\nenv = environ({'ALLUSERSPROFILE': 'C:\\\\ProgramData', 'APPDATA': 'C:\\\\Users\\\\87842\\\\AppData\\\\Roaming', 'CLASSPATH': '.;D:\\\\My...Windows', 'PYTEST_CURRENT_TEST': 'testcase/patient/test_updateziliao.py::TestAdd::()::test_004_xiugaiyongyao (setup)'})\nstartupinfo = <subprocess.STARTUPINFO object at 0x000001A73EB59208>\ncreationflags = 0, shell = False, p2cread = Handle(760), p2cwrite = 4\nc2pread = -1, c2pwrite = Handle(892), errread = -1, errwrite = Handle(896)\nunused_restore_signals = True, unused_start_new_session = False\n\n    def _execute_child(self, args, executable, preexec_fn, close_fds,\n                       pass_fds, cwd, env,\n                       startupinfo, creationflags, shell,\n                       p2cread, p2cwrite,\n                       c2pread, c2pwrite,\n                       errread, errwrite,\n                       unused_restore_signals, unused_start_new_session):\n        \"\"\"Execute program (MS Windows version)\"\"\"\n    \n        assert not pass_fds, \"pass_fds not supported on Windows.\"\n    \n        if not isinstance(args, str):\n            args = list2cmdline(args)\n    \n        # Process startup details\n        if startupinfo is None:\n            startupinfo = STARTUPINFO()\n        if -1 not in (p2cread, c2pwrite, errwrite):\n            startupinfo.dwFlags |= _winapi.STARTF_USESTDHANDLES\n            startupinfo.hStdInput = p2cread\n            startupinfo.hStdOutput = c2pwrite\n            startupinfo.hStdError = errwrite\n    \n        if shell:\n            startupinfo.dwFlags |= _winapi.STARTF_USESHOWWINDOW\n            startupinfo.wShowWindow = _winapi.SW_HIDE\n            comspec = os.environ.get(\"COMSPEC\", \"cmd.exe\")\n            args = '{} /c \"{}\"'.format (comspec, args)\n    \n        # Start the process\n        try:\n            hp, ht, pid, tid = _winapi.CreateProcess(executable, args,\n                                     # no special security\n                                     None, None,\n                                     int(not close_fds),\n                                     creationflags,\n                                     env,\n                                     cwd,\n>                                    startupinfo)\nE                                    FileNotFoundError: [WinError 2] 系统找不到指定的文件。\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python36\\lib\\subprocess.py:990: FileNotFoundError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <class 'test_updateziliao.TestAdd'>\n\n    @MASTER_HELPER.step(\"初始化启动浏览器\")\n    def setup_class(self):\n        '''用例执行前，启动浏览器，创建chrome实例'''\n>       driver = webdriver.Chrome()\n\ntestcase\\patient\\test_updateziliao.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py:73: in __init__\n    self.service.start()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.service.Service object at 0x000001A73EC1D320>\n\n    def start(self):\n        \"\"\"\n            Starts the Service.\n    \n            :Exceptions:\n             - WebDriverException : Raised either when it can't start the service\n               or when it can't connect to the service\n            \"\"\"\n        try:\n            cmd = [self.path]\n            cmd.extend(self.command_line_args())\n            self.process = subprocess.Popen(cmd, env=self.env,\n                                            close_fds=platform.system() != 'Windows',\n                                            stdout=self.log_file,\n                                            stderr=self.log_file,\n                                            stdin=PIPE)\n        except TypeError:\n            raise\n        except OSError as err:\n            if err.errno == errno.ENOENT:\n                raise WebDriverException(\n                    \"'%s' executable needs to be in PATH. %s\" % (\n>                       os.path.basename(self.path), self.start_error_message)\nE                       selenium.common.exceptions.WebDriverException: Message: 'chromedriver' executable needs to be in PATH. Please see https://sites.google.com/a/chromium.org/chromedriver/home\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\selenium\\webdriver\\common\\service.py:83: WebDriverException",
  "flaky" : false,
  "beforeStages" : [ ],
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "feature",
    "value" : "心之力添护士"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "host",
    "value" : "DESKTOP-AOJIN0S"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "severity",
    "value" : "normal"
  }, {
    "name" : "testId",
    "value" : "用例名：医生为修改用药达标值"
  }, {
    "name" : "thread",
    "value" : "41632-MainThread"
  }, {
    "name" : "suite",
    "value" : "test_updateziliao"
  }, {
    "name" : "testClass",
    "value" : "test_updateziliao"
  }, {
    "name" : "testMethod",
    "value" : "TestAdd.test_004_xiugaiyongyao"
  }, {
    "name" : "package",
    "value" : "test_updateziliao"
  }, {
    "name" : "resultFormat",
    "value" : "allure1"
  } ],
  "parameters" : [ ],
  "links" : [ {
    "name" : "用例名：医生为修改用药达标值",
    "url" : "用例名：医生为修改用药达标值",
    "type" : "tms"
  } ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "ef7ac993f0838845.json",
  "parameterValues" : [ ]
}